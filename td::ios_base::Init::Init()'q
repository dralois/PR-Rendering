[1mdiff --git a/include/mesh_managers.h b/include/mesh_managers.h[m
[1mindex 07c51e1..214f016 100644[m
[1m--- a/include/mesh_managers.h[m
[1m+++ b/include/mesh_managers.h[m
[36m@@ -109,6 +109,6 @@[m [mprivate:[m
     AtArray *ArrayConvertByVector(std::vector<T> input, AtByte type);[m
 public:[m
     using MeshManager::MeshManager;[m
[31m-    bool drawObj(int obj_id, vector<float> &pos, vector<float> &quat);[m
[32m+[m[32m    AtNode *drawObj(int obj_id, vector<float> &pos, vector<float> &quat);[m
     static bool destroyObject(string);[m
 };[m
[1mdiff --git a/include/scene_manager.h b/include/scene_manager.h[m
[1mindex da2db50..e4cbc99 100644[m
[1m--- a/include/scene_manager.h[m
[1m+++ b/include/scene_manager.h[m
[36m@@ -45,6 +45,7 @@[m [mprivate:[m
     vector<ObjectInfo *> curr_objects;[m
     vector<pair<PxConvManager *, PxRigidDynamic *>> sim_objects;[m
     PxTriManager *sceneMeshManager;[m
[32m+[m[32m    AiMeshManager *sceneAiMeshManager;[m
     PxRigidDynamic *myScene;[m
     int scene_count;[m
 [m
[1mdiff --git a/src/mesh_managers.cpp b/src/mesh_managers.cpp[m
[1mindex bb10506..a1421ae 100644[m
[1m--- a/src/mesh_managers.cpp[m
[1m+++ b/src/mesh_managers.cpp[m
[36m@@ -233,7 +233,7 @@[m [mAtArray *AiMeshManager::ArrayConvertByVector(std::vector<T> input, AtByte type)[m
     return r;[m
 }[m
 [m
[31m-bool AiMeshManager::drawObj(int obj_id, vector<float> &pos, vector<float> &quat)[m
[32m+[m[32mAtNode *AiMeshManager::drawObj(int obj_id, vector<float> &pos, vector<float> &quat)[m
 {[m
 [m
     char buffer[50];[m
[36m@@ -280,5 +280,17 @@[m [mbool AiMeshManager::drawObj(int obj_id, vector<float> &pos, vector<float> &quat)[m
     AiM4Translation(trans, &transV);[m
     AiM4Mult(prod, prod, trans);[m
     AiNodeSetMatrix(mesh, "matrix", prod);[m
[32m+[m
[32m+[m[32m    delete[] buffer;[m
[32m+[m[32m    return mesh;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mbool AiMeshManager::destroyObject(string node_name)[m
[32m+[m[32m{[m
[32m+[m[32m    AtNode *node = AiNodeLookUpByName(node_name.c_str());[m
[32m+[m[32m    if(node == nullptr){[m
[32m+[m[32m        return false;[m
[32m+[m[32m    }[m
[32m+[m[32m    AiNodeDestroy(node);[m
     return true;[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/src/scene_manager.cpp b/src/scene_manager.cpp[m
[1mindex 84cb213..3c702a3 100644[m
[1m--- a/src/scene_manager.cpp[m
[1m+++ b/src/scene_manager.cpp[m
[36m@@ -1,5 +1,6 @@[m
 #include "scene_manager.h"[m
 [m
[32m+[m
 SceneManager::SceneManager(PxPhysics *gPhysics, PxScene *gScene, PxCooking *gCooking,[m
                            PxFoundation *gFoundation, PxMaterial *gMaterial, AtNode *camera,[m
                            AtNode *options, AtNode *driver, AtArray *outputs_array,[m
[36m@@ -49,8 +50,7 @@[m [mvoid SceneManager::destroy_meshes()[m
     free(sceneMeshManager);[m
     for (auto obj : sim_objects)[m
     {[m
[31m-        obj.second->release();[m
[31m-        free(obj.second);[m
[32m+[m[32m        PxMeshManager::destroyObject(obj.second);[m
     }[m
     sim_objects.clear();[m
 }[m
[36m@@ -85,6 +85,49 @@[m [mvoid SceneManager::fetch_results()[m
     }[m
 }[m
 [m
[32m+[m[32mvoid SceneManager::render_scene_depth_imgs()[m
[32m+[m[32m{[m
[32m+[m[32m    string mesh_path = scene_path + + "/mesh.refined.obj";[m
[32m+[m[32m    sceneAiMeshManager = new AiMeshManager(mesh_path, 0, 100);[m
[32m+[m[32m    vector<float> pos{0, 0, 0};[m
[32m+[m[32m    vector<float> rot{0, 0, 0, 1};[m
[32m+[m[32m    AtNode* sceneMesh = sceneAiMeshManager->drawObj(0, pos, rot);[m
[32m+[m
[32m+[m[41m    [m
[32m+[m
[32m+[m[32m    AiMeshManager::destroyObject("body0_0");[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid SceneManager::render_bodies_depth()[m
[32m+[m[32m{[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mbool SceneManager::calculate_mask()[m
[32m+[m[32m{[m
[32m+[m[32m    return true;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid SceneManager::render_bodies_seg()[m
[32m+[m[32m{[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid SceneManager::blend_depth()[m
[32m+[m[32m{[m
[32m+[m
[32m+[m[32m}[m
[32m+[m[32mvoid SceneManager::blend_seg()[m
[32m+[m[32m{[m
[32m+[m
[32m+[m[32m}[m
[32m+[m[32mvoid SceneManager::blend_rgb()[m
[32m+[m[32m{[m
[32m+[m
[32m+[m[32m}[m
[32m+[m[32mvoid SceneManager::load_cam_mat()[m
[32m+[m[32m{[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
 SceneManager::ObjectInfo::ObjectInfo(int shape_id, int object_sim_id) : shape_id(shape_id), object_sim_id(object_sim_id){};[m
 [m
 void SceneManager::ObjectInfo::set_pose(Vector3f *pos, Vector4f *rot)[m
