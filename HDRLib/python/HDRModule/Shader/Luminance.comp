#version 430
#define PI 3.1415926535897932384626433832795

layout(binding = 1) buffer LUMINANCE
{
    float luminance[];
};

layout(binding = 2) buffer VARS
{
    uvec2 size;
};

layout(binding = 3) buffer OUT
{
    float result[];
};

// Calculates solid angle for pixel in equirectangular panorama
float solid_angle_pixel(vec2 pixel, vec2 size)
{
    // Calculate pixel longitude / latitude rectangle
    float temp = 0.5 + pixel.y - (size.y / 2.0);
    vec2 lat = vec2(temp - 0.5, temp + 0.5) * PI / size.y;
    vec2 lng = vec2(pixel.x, pixel.x + 1.0)  * 2.0 * PI / size.x;
    // See https://en.wikipedia.org/wiki/Solid_angle#Latitude-longitude_rectangle
    return (sin(lat.y) - sin(lat.x)) * (lng.y - lng.x);
}

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

// Actual compute shader
void main()
{
    // Determine compute idx
    uint idx = gl_GlobalInvocationID.x;
    // Calculate pixel index
    vec2 px = vec2(mod(idx, size.x), idx / size.x);
    // Calculate corresponding solid angle
    float omega = solid_angle_pixel(px, vec2(size));
    // Calculate resulting illuminance
    result[idx] = luminance[idx] * omega;
}